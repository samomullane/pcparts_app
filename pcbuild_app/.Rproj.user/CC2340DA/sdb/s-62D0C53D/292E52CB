{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output, session) {\n\n\n  \n##################################################################################################################\n#####   Establish connection to database, see global.R #####  \n  conn <- dbConnector(session, dbname = dbname)\n\n##################################################################################################################\n#####   Modifying dataframes in \"All available products\" tab based on user input #####  \n  \n#   Filter all the databases in \"All available products\" tab based on user input \n  filter_str_reactive <- reactive(\n    paste(\"rating_n > \", input$rating_n-1,\n          \"AND \",\n          \"prod_price > \", input$price[1],\n          \"AND \",\n          \"prod_price < \", input$price[2],\n          \"AND \",\n          \"rating_val > \", rating_val_reactive()\n    )\n  )\n  \n#   Convert from star input to filter value for use in filter_str_reactive\n  rating_val_reactive <- reactive(\n    switch(input$rating_val,\n           \"all\" = 0,\n           \"four\" = 3.99,\n           \"three\" = 2.99,\n           \"two\" = 1.99,\n           \"one\" = 0.99\n           )\n  )\n  \n##################################################################################################################\n#####   Get datatables from pcpart.db for \"All available products\" tab #####  \n  case_db <- reactive(dbGetData(conn = conn,\n                                tblname = 'case_table',\n                                spec_vec = c(\"prod_name as Name\",\n                                                \"manufacturer as Manufacturer\",\n                                                \"color as Color\",\n                                                \"rating_val as `Average Rating`\",\n                                                \"rating_n as `# of Ratings`\",\n                                                \"prod_price as Price\",\n                                                \"`motherboard compatibility` as `Motherboard Compatibility`\",\n                                                \"`gpu limit in`\"\n                                             ),\n                                filter_str_reactive()\n                                ))\n  \n  cpu_db <- reactive(dbGetData(conn = conn,\n                                tblname = 'cpu_table',\n                                spec_vec = c(\"prod_name as Name\",\n                                             \"manufacturer as Manufacturer\",\n                                             \"rating_val as `Average Rating`\",\n                                             \"rating_n as `# of Ratings`\",\n                                             \"prod_price as Price\",\n                                             \"socket as Socket\"),\n                               filter_str_reactive()\n                               ))\n  \n  cooler_db <- reactive(dbGetData(conn = conn,\n                               tblname = 'cooler_table',\n                               spec_vec = c(\"prod_name as Name\",\n                                            \"manufacturer as Manufacturer\",\n                                            \"rating_val as `Average Rating`\",\n                                            \"rating_n as `# of Ratings`\",\n                                            \"prod_price as Price\",\n                                            \"`supported sockets` as `Compatible Sockets`\"),\n                               filter_str_reactive()\n                               ))\n  \n  gpu_db <- reactive(dbGetData(conn = conn,\n                               tblname = 'gpu_table',\n                               spec_vec = c(\"prod_name as Name\",\n                                            \"manufacturer as Manufacturer\",\n                                            \"rating_val as `Average Rating`\",\n                                            \"rating_n as `# of Ratings`\",\n                                            \"prod_price as Price\",\n                                            \"chipset as Chipset\",\n                                            \"`mem int` as `Memory (GB)`\",\n                                            \"length\"),\n                               filter_str_reactive()\n                               ))\n  \n  memory_db <- reactive(dbGetData(conn = conn,\n                               tblname = 'memory_table',\n                               spec_vec = c(\"prod_name as Name\",\n                                            \"manufacturer as Manufacturer\",\n                                            \"rating_val as `Average Rating`\",\n                                            \"rating_n as `# of Ratings`\",\n                                            \"prod_price as Price\",\n                                            \"`num sticks` as `# of Sticks`\",\n                                            \"`total mem` as `Total Memory (GB)`\"),\n                               filter_str_reactive()\n                               ))\n  \n  motherboard_db <- reactive(dbGetData(conn = conn,\n                                  tblname = 'motherboard_table',\n                                  spec_vec = c(\"prod_name as Name\",\n                                               \"manufacturer as Manufacturer\",\n                                               \"rating_val as `Average Rating`\",\n                                               \"rating_n as `# of Ratings`\",\n                                               \"prod_price as Price\",\n                                               \"`cpu socket` as Socket\",\n                                               \"`form factor`\"),\n                                  filter_str_reactive()\n                                  ))\n  \n  psu_db <- reactive(dbGetData(conn = conn,\n                               tblname = 'psu_table',\n                               spec_vec = c(\"prod_name as Name\",\n                                            \"manufacturer as Manufacturer\",\n                                            \"rating_val as `Average Rating`\",\n                                            \"rating_n as `# of Ratings`\",\n                                            \"prod_price as Price\",\n                                            \"`watt n` as `Wattage (W)`\"),\n                               filter_str_reactive()\n                               ))\n  \n  storage_db <- reactive(dbGetData(conn = conn,\n                                       tblname = 'storage_table',\n                                       spec_vec = c(\"prod_name as Name\",\n                                                    \"manufacturer as Manufacturer\",\n                                                    \"rating_val as `Average Rating`\",\n                                                    \"rating_n as `# of Ratings`\",\n                                                    \"prod_price as Price\",\n                                                    \"`capacity total` as `Capacity (GB)`\"),\n                                   filter_str_reactive()\n                                   ))\n  \n  \n##################################################################################################################\n#####   Output to UI datatables for \"All available products\" tab #####\n  output$case_db <- renderDataTable({\n    case_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$cpu_db <- renderDataTable({\n    cpu_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$cooler_db <- renderDataTable({\n    cooler_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$gpu_db <- renderDataTable({\n    gpu_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$memory_db <- renderDataTable({\n    memory_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$motherboard_db <- renderDataTable({\n    motherboard_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$psu_db <- renderDataTable({\n    psu_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n  output$storage_db <- renderDataTable({\n    storage_db()\n  }, \n  options = list(scrollX = TRUE, pageLength = 10, searchDelay = 50))\n  \n##################################################################################################################\n#####   Output to UI datatables for \"Simple Build\" tab #####\n  output$simple_build_price <- renderValueBox(\n    valueBox(subtitle = \"Total build price\",\n      value = paste('$', cpu_db_2()[1, 'Price'] + \n        cooler_db_2()[1, 'Price'] +\n        gpu_db_2()[1, 'Price'] +\n        psu_db_2()[1, 'Price'] +\n        memory_db_2()[1, 'Price'] +\n        motherboard_db_2()[1, 'Price'] +\n        storage_db_2()[1, 'Price'] + \n        case_db_2()[1, 'Price'],\n        sep='')\n    )\n  )  \n  \n  output$simple_build_tdp <- renderValueBox(\n    valueBox(subtitle = \"Total estimated wattage\",\n             value = tdp_reactive()\n    )\n  )  \n  \n  \n  cpu_db_2 <- reactive(dbGetData(conn = conn,\n                                 tblname = 'cpu_table',\n                                 spec_vec = c(\"prod_name as `CPU Name`\",\n                                              \"manufacturer as `CPU Manufacturer`\",\n                                              \"rating_val as `Average Rating`\",\n                                              \"rating_n as `# of Ratings`\",\n                                              \"prod_price as Price\",\n                                              \"socket as Socket\",\n                                              \"tdp\"),\n                                 orderby = c(\"ORDER BY rating_val DESC\",\n                                             \"rating_n DESC \")\n  ))\n  \n  output$simple_build_db_cpu <- renderDataTable({\n    cpu_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:5), searchable = FALSE))))\n  \n  cooler_db_2 <- reactive(dbGetData(conn = conn,\n                                 tblname = 'cooler_table',\n                                 spec_vec = c(\"prod_name as `Cooler Name`\",\n                                              \"manufacturer as `Cooler Manufacturer`\",\n                                              \"rating_val as `Average Rating`\",\n                                              \"rating_n as `# of Ratings`\",\n                                              \"prod_price as Price\"),\n                                 orderby = c(\"ORDER BY rating_val DESC\",\n                                             \"rating_n DESC \"),\n                                 filter_str = filter_str_cooler_simple()\n  ))\n  \n  output$simple_build_db_cooler <- renderDataTable({\n    cooler_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:4), searchable = FALSE))))\n  \n  case_db_2 <- reactive(dbGetData(conn = conn,\n                                    tblname = 'case_table',\n                                    spec_vec = c(\"prod_name as `Case Name`\",\n                                                 \"manufacturer as `Case Manufacturer`\",\n                                                 \"rating_val as `Average Rating`\",\n                                                 \"rating_n as `# of Ratings`\",\n                                                 \"prod_price as Price\",\n                                                 \"type as Type\",\n                                                 \"`internal 2.5in bays`\",\n                                                 \"`internal 3.5in bays`\",\n                                                 \"`external 3.5in bays`\",\n                                                 \"`external 5.25in bays`\"),\n                                    orderby = c(\"ORDER BY rating_val DESC\",\n                                                \"rating_n DESC \"),\n                                    filter_str = paste(filter_str_case_psu_simple(),\n                                                       filter_case_plus())\n  ))\n  \n  output$simple_build_db_case <- renderDataTable({\n    case_db_2()[1, 1:6]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:5), searchable = FALSE))))\n  \n  gpu_db_2 <- reactive(dbGetData(conn = conn,\n                                  tblname = 'gpu_table',\n                                  spec_vec = c(\"prod_name as `GPU Name`\",\n                                               \"manufacturer as `GPU Manufacturer`\",\n                                               \"rating_val as `Average Rating`\",\n                                               \"rating_n as `# of Ratings`\",\n                                               \"prod_price as Price\",\n                                               \"length as Length\",\n                                               \"tdp\"),\n                                  orderby = c(\"ORDER BY rating_val DESC\",\n                                              \"rating_n DESC \")\n  ))\n  \n  output$simple_build_db_gpu <- renderDataTable({\n    gpu_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:5), searchable = FALSE))))\n  \n  memory_db_2 <- reactive(dbGetData(conn = conn,\n                                 tblname = 'memory_table',\n                                 spec_vec = c(\"prod_name as `Memory Name`\",\n                                              \"manufacturer as `Memory Manufacturer`\",\n                                              \"rating_val as `Average Rating`\",\n                                              \"rating_n as `# of Ratings`\",\n                                              \"prod_price as Price\",\n                                              \"speed\"),\n                                 orderby = c(\"ORDER BY rating_val DESC\",\n                                             \"rating_n DESC \"),\n                                 filter_str = filter_str_memory_simple()\n  ))\n  \n  output$simple_build_db_memory <- renderDataTable({\n    memory_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:4), searchable = FALSE))))\n  \n  motherboard_db_2 <- reactive(dbGetData(conn = conn,\n                                    tblname = 'motherboard_table',\n                                    spec_vec = c(\"prod_name as `Motherboard Name`\",\n                                                 \"manufacturer as `Motherboard Manufacturer`\",\n                                                 \"rating_val as `Average Rating`\",\n                                                 \"rating_n as `# of Ratings`\",\n                                                 \"prod_price as Price\",\n                                                 \"`DDR type`\",\n                                                 \"`memory type`\",\n                                                 \"`form factor` as `Form Factor`\"),\n                                    orderby = c(\"ORDER BY rating_val DESC\",\n                                                \"rating_n DESC \"),\n                                    filter_str = filter_str_motherboard_simple()\n  ))\n  \n  output$simple_build_db_motherboard <- renderDataTable({\n    motherboard_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:5), searchable = FALSE))))\n  \n  psu_db_2 <- reactive(dbGetData(conn = conn,\n                                 tblname = 'psu_table',\n                                 spec_vec = c(\"prod_name as `PSU Name`\",\n                                              \"manufacturer as `PSU Manufacturer`\",\n                                              \"rating_val as `Average Rating`\",\n                                              \"rating_n as `# of Ratings`\",\n                                              \"prod_price as Price\",\n                                              \"`watt n` as `Power (W)`\"),\n                                 orderby = c(\"ORDER BY rating_val DESC\",\n                                             \"rating_n DESC \"),\n                                 filter_str = paste(filter_str_case_psu_simple(),\n                                                    filter_power_plus())\n  ))\n  \n  output$simple_build_db_psu <- renderDataTable({\n    psu_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:4), searchable = FALSE))))\n  \n  storage_db_2 <- reactive(dbGetData(conn = conn,\n                                 tblname = 'storage_table',\n                                 spec_vec = c(\"prod_name as `Storage Name`\",\n                                              \"manufacturer as `Storage Manufacturer`\",\n                                              \"rating_val as `Average Rating`\",\n                                              \"rating_n as `# of Ratings`\",\n                                              \"prod_price as Price\"),\n                                 orderby = c(\"ORDER BY rating_val DESC\",\n                                             \"rating_n DESC \"),\n                                 filter_str = filter_str_storage_simple()\n  ))\n  \n  output$simple_build_db_storage <- renderDataTable({\n    storage_db_2()[1,]\n  }, \n  options = list(scrollX = FALSE,\n                 dom  = 't',\n                 ordering = FALSE,\n                 columnDefs = list(list(targets = c(0:4), searchable = FALSE))))\n  \n######################################################################################## \n##### Hidden compatibility checks #####\n  #(note: CPU has `includes cpu cooler` column for cheap builds)\n  # CPU-motherboard: 'socket'-'cpu socket type'\n  filter_str_motherboard_simple <- reactive(\n    paste(\"rating_n > 0 \",\n          \"AND \",\n          \"prod_price > 0 \",\n          \"AND \",\n          \"`cpu socket type` = '\", cpu_db_2()[1,'Socket'], \"'\",\n          sep=''\n    )\n  )\n  \n  # CPU-cooler: 'socket'-'supported sockets' \n  filter_str_cooler_simple <- reactive(\n    paste(\"rating_n > 0 \",\n          \"AND \",\n          \"prod_price > 0 \",\n          \"AND \",\n          \"`supported sockets` LIKE '%\", cpu_db_2()[1,'Socket'], \"%'\",\n          sep=''\n    )\n  )\n  \n  #Motherboard-PSU compatibility\n  #PSUs have the following columns:\n  #Micro ATX compatibility, Mini ITX compatibility, EATX compatibility, ATX compatibility\n  \n  # Motherboard-Case compatibility\n  # Cases have the following columns:\n  # ATX compatibility,\tMicro ATX compatibility,\tMini ITX compatibility,\t\n  # EATX compatibility,\tSSI EEB compatibility\n  \n  #Can use the same code for both:\n  filter_str_case_psu_simple <- reactive(\n    paste(\"rating_n > 0 \",\n          \"AND \",\n          \"prod_price > 0 \",\n          \"AND \",\n          \"`\", motherboard_db_2()[1, 'Form Factor'],\n          \" compatibility` = 1\",\n          sep=''\n    )\n  )\n  \n  # Case-GPU\n  # Case has `gpu limit in` column, gpu has `length` column, both may be missing values\n  # Need to append this to the previous filter\n  filter_case_plus <- reactive(\n    paste(\" AND \",\n          \"`gpu limit in` > \",\n          gpu_db_2()[1, 'Length'],\n          sep='')\n  )\n  \n  # Case-Storage\n  #`2.5in form` and `3.5in form` are boolean columns in storage\n  filter_str_storage_simple <- reactive(\n    paste(\"rating_n > 0 \",\n          \"AND \",\n          \"prod_price > 0 \",\n          \"AND \",\n          \"`2.5in form` <= \",\n          case_db_2()[1, 'internal 2.5in bays'],\n          \" AND \",\n          \"(`3.5in form` <= \",\n          case_db_2()[1, 'internal 3.5in bays'],\n          \" OR \",\n          \"`3.5in form` <= \",\n          case_db_2()[1, 'external 3.5in bays'],\n          \")\",\n          sep=''\n    )\n  )\n  \n  #Motherboard-Memory: memory['speed'] is mem_speed\n  # def mobo_ram_compatibility(mem_speed):\n  #     mem_type = int(re.search('^DDR([234])', mem_speed).group(1))\n  #       temp_bool_type = [mem_type == x for x in motherboard['DDR type']]\n  # \n  #     mem_n = re.search('([0-9]{2,4})', mem_speed).group(1)\n  #       temp_bool_n = [(mem_n in x) for x in motherboard['memory type']]\n  #   return ([a and b for a, b in zip(temp_bool_type, temp_bool_n)])\n  \n  filter_str_memory_simple <- reactive(\n    paste(\"rating_n > 0 \",\n          \"AND \",\n          \"prod_price > 0 \",\n          \"AND \",\n          \"`speed type` = \",\n          motherboard_db_2()[1, 'DDR type'],\n          \" AND '\",\n          motherboard_db_2()[1, 'memory type'],\n          \"' LIKE '%' || `speed n` || '%'\",\n          sep=''\n    )\n  )\n  \n  ### Last compatibility: Power usage:\n  # CPU = 'tdp'\n  # GPU = 'tdp'\n  # Cooler = 10 for standard, 15 for liquid cooled\n  # Motherboard = 60 for old, 70 for new\n  # Memory = 9 for DDR3, 7 for DD4 (per stick)\n  # Storage = 20 for HDD, 10 for SSD\n  # Not full implemented, using max for each discrete range, e.g. 20 for storage\n  filter_power_plus <- reactive(\n    paste(\" AND \",\n          \"`Power (W)` > \",\n          tdp_reactive(),\n          sep=''\n    )\n  )\n  \n  tdp_reactive <- reactive(\n    as.integer(gpu_db_2()[1,'tdp']) + as.integer(cpu_db_2()[1, 'tdp']) +\n      15 + 70 + 36 + 20\n  )\n  \n  \n})\n",
    "created" : 1494012264105.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "139|36|141|2|\n144|39|146|2|\n149|36|151|2|\n154|39|156|2|\n159|44|161|2|\n164|36|166|2|\n169|40|171|2|\n",
    "hash" : "2732296563",
    "id" : "292E52CB",
    "lastKnownWriteTime" : 1494121907,
    "last_content_update" : 1494121907073,
    "path" : "~/Desktop/pcparts/pcbuild_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}